using UnityEngine;

namespace DGP.UnityExtensions.Singletons
{
    public class PersistentMonoSingleton<T> : MonoBehaviour where T : Component
    {
        [SerializeField] private bool autoUnparentOnAwake = true;

        private static T instance;
        
        public static bool HasInstance => instance != null;
        public static T TryGetInstance => HasInstance ? instance : null;

        public static T Instance
        {
            get
            {
                if (instance != null) 
                    return instance;
                
                instance = FindFirstObjectByType<T>();
                if (instance == null) {
                    GameObject obj = new GameObject();
                    obj.name = typeof(T).Name + " (AutoGenerated)";
                    instance = obj.AddComponent<T>();
                }

                return instance;
            }
        }

        protected virtual void Awake()
        {
            InitializeSingleton();
        }
        
        protected virtual void InitializeSingleton()
        {
            if (!Application.isPlaying)
                return;
            
            if (autoUnparentOnAwake)
                transform.SetParent(null);

            if (instance == null) {
                instance = this as T;
                DontDestroyOnLoad(gameObject);
            } else {
                if (instance != this)
                    Destroy(gameObject);
            }
        }
    }
}